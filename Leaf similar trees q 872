/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int>v1;  //making one vector
        vector<int>v2;   // making another vector
        dfs(root1,v1);    // leaf node gulo ber korar jonno of tree 1 ei function ta use korchi
         dfs(root2,v2);  // // leaf node gulo ber korar jonno of tree 1 ei function ta use korchi

         if(v1.size()==v2.size()){     // checking if the size of the two vectors is same
             for(int i=0;i<v1.size();i++){  //now checking if the leave nodes of two strings are same or not
                 if(v1[i]!=v2[i])   //if it is not same 
                 return false;    // returning false
             }
             return true;   // if the leave nodes matches and sequence is also same returning true
         }
         return false;    // size same nahole returning false




    }

    void dfs(TreeNode* root,vector<int>&v){
        if(root==NULL)   // if root doesnt carry any element
        return;    // return false or return

        if(root->left==NULL && root->right==NULL){    // if the node doesnt have any right and left children it is known as the leaf node
            v.push_back(root->val);  //pushing the value of leaf node in the vector
            return;
        }
        dfs(root->left,v);     // now if the root node contains both right and left nodes we will recursively check the left and right nodes to
        dfs(root->right,v);    // find the leaf nodes

    }
};
